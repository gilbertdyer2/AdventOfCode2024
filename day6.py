inp = '''
..........#..........#.#.......................................................................#...............#......#...#.......
........................................#..#..........#.........#..#..............................................................
.........#.......................................................................................................#................
..................................#.#..................................#..#.......#.....#.#............#.#........................
...#.......................................................#.........#...................#.................#......................
...............#.........#...........#................................................#..............#...........#.............#..
...................#..#..................................................................#........................................
........##..............................##................................#.....................#...#.............................
................................#...................#...........#.#...........................................................#...
......#......#...........................................#............................................#...#..#....#...............
............................#...#......#.....#.........#...#..#..............#....#...................#.........................#.
....................##.#........#.........#.............#......................#.#....#..............#........................#..#
#....................#......#..........#................................................................................#.........
..............#.............................................................#..........................#........#.....#..........#
.....................#........#......##.#.........#..........#.##.......................................#....#....................
................................................................#..#...........#.........#........................................
...............#..........#..#....#.#.#..................................#................................#..................#....
...................#....#.........................................................................................................
....#........................................................#......#......#.......................................#............#.
................................................#...#...........................................................#.................
..............#............................#.#.........................................#....#.....................................
...........#....#......#..................................................................#.....#..........#.............#.#......
...........................................#........#.#.........#.................#.....#.........................................
.............#.........#.........................#......#.....................#.#.................................................
.............#.....#................#...................................................#.........................................
..#....#............#................#...........................#..................#............#................................
#............................................................#......#..................................#...............#.......#..
.........................#...#.................................................................#..#...........................#..#
.................#.......................................#...............................#...#...#............#..........#........
......................#.........#...............#......#................................#.#....#.......#..........................
.#......##.................................#.................#...#.................#............................................#.
..#..................#.....#.#......#................................#..#...#......##....#..........#..................#..........
.................................................................................#...................................#............
..............................#..#...............................#....#.............................#.......#..................#..
..........#........#.....................................#..............#.....#..#................#........#.#..................#.
....................................#....#..........#........##...................................................................
.......#............................##.......#....#................................................................#.#............
.......................#......................................................#.................#.................................
.......#...................#..................................................................................................#...
.........#.....#................................#...............#........#.....................................#................#.
..#...........................#.....#..........#............................................#........#........#.#.................
...#.........#.............................#......#......................#.......................................#.......#.......#
.........................#.........#........#....................#..................#....#...#.................#..................
...............#.....................................................#....#....^............#.....................................
.......#.......#.....#.............#...........#...#..................................#...#.#....#.........................#......
.............#....................#..................................................#.........................#..................
......................................................##..........................................................................
.....................................#.....................................................................#............#..#....#.
#......................#....................#...#..................#....#.......................................#........#........
.#.....................................................................#...........................#....................##........
............#............#.........................#.........#.....................#..#........#...............................#..
.......#..#...........................................................#..#........#................#................#.............
..............................................................................................................#...................
..#............................#.....#.............#...............#..................................................#...........
..#........#..........................................................................#...........#.....##...................#....
..#.........#...................................#.................................................................................
...#.#......................#.......#...........#.........................................................#..........#............
.............#......#............#............................................................#......#............................
..............#......#...................................................................................................#........
..............#.#............................................................................#......##............................
...........#....................#...................#......#..............#.........................#.....#...#.............#.....
.................#......#................................................................................#...............#........
..#...........................................................................................#...................................
#.............#.......................#..#.....................................#..#.....#.....................#...................
.........#..#...#......#.......#................................#..............#.........#..........................#......#......
.....##...........#................................................................................................#..........#...
.#.........#....................................................##.............................#...#.........#....................
............#...............................#.#...............................................#...............................#...
...............................#..................#...........................#..............................................#....
.#..........#....#.............#.....#.....................#.....................#...................#.........................#..
.............................................................#................##..............#...................#...............
..........................##.........#................................................................................#...........
........#..#...........................#...................................................................#......................
..#.....#...................................................................#.....#....#..#.......#.......#.....#.....#...........
....................................#.......#....#......................................#........................#...........#....
...............#..............#.................#...............#....#....................................................#.......
....#..................#..........................................................................#.......#..........#............
..#...................................................#...............#...............................#......#................#...
.......#............#............................#.......................................#...#....................##..............
...............................#.......#................................#..............#....................#.....................
...........................#..............................................#..........................................#.#..#.......
....#........#....................#...........................................................................................#...
#..................#.....................#....................................#.#............#...................#................
....#........#...#............................#...#.......................#...............#........#....#.........................
.............................................................................................#....#...............#..#............
.........#..........#...........................................................#.#........................#..................#...
.....................................#................#.........#.#..........##......................#..#.........................
.....#..#.....................................................................#.#................................##...............
...............................#....#.#..................................................#.#.........................#........#...
#.......................................##.....#..........................#..#....................#.........#..........#..........
......#.#.............#....##...................................................................#................#....#......#....
..................#...#........................................#........................................#...#.....................
....................#...#...........##...................#..#....#.............................#......#............#..............
.........#.........................................................................#..........#...................................
......................................#...................................................................#.#.#..................#
.......#...#.....#........#..............#................#.........................#.#...........#.#.............#.......#.......
...#.................#......#...........#.............#.....................................#.....................................
.#...........................................................................................................#....................
............#..........#.......................#...........................................................................#....#.
......#....#...#.........................#......#......................##....#.......#.....................#....#.................
....................................#..........................#.......#.......#......................................#........##.
...................#..................................................................................#..............#.#..........
....#..........................#.....................#.#.........#...#......#..#....#.............................................
..................#......#................#........................................#...#........#.................................
...............................#.........#..................................................#.....................................
..................#..............................................#...............#...........#..#.................................
...........................#........................................................#........#....................................
.................#.......#.........##.............#...#....#......................#.......#.......................................
...........#...............#........................................................................#.#...........................
...........#..........#..........................#.....................#....#.........#...................##...#.........#........
.......#.............#........#...........................................#.................................................#.#...
.....................#..................................#.#......#...................#.........................#...#....#..##.....
.......#...................#.............#..#..................................................................#..................
..#........#........................#............#..#...#...........................#......................................#.#....
.............................#..#.......#.........#.....................................................................##...#....
..............##................#........................#..................................................#.....#...#...........
.............#..............#......#..............................................................#...................#...........
#...#............#...........##.............#..........................................#..........................................
..........................#.....#...................#....................#................#.......................................
.....................................................#..................................................................#...#.....
..................#.#........#....#.#.#..#...............................................#.....###..#.........................#...
.#...#.........#..........#.......................................................................#.#............#............#...
...#..............................#.............................#.#............................................#..................
#................................................#..#..........................................................#...............#.#
........................................#.............#..............#...............#.........#...#..............................
..............................#.................#..................#................#.....#.......#..........#....................
............#.......#...........#.........................................................................................#.......
#.#..............................#................#.#...................#.....................#.....................#......#......
.....#..#.......##...........................................#............................#.......................................
.......#..#..#.........#..........................#.#....#..........................#...#........................#.....#..........
'''

# Provided testcase
inp_testcase = '''
....#.....
.........#
..........
..#.......
.......#..
..........
.#..^.....
........#.
#.........
......#...
'''

# Should be 2 placements
inp_testcase2 = ''' 
###..
....#
..^.#
....#
####.
'''

# Should be 2 placements
'''
_________
....#..
..#.O..
......#
.#..^..
.....#.
_________
....#..
..#...O
......#
.#..^..
.....#.
'''

# Verifies 1 bounce followed by exit, cycle
inp_testcase3 = '''
....#..
..#....
......#
.#..^..
.....#.
'''

# Verifies 1 width cycle
#   - Should be 2 placements 
inp_testcase4 = '''
.......
#.#....
.......
#^#....
.#.....
'''

# Verifies non-rectangular loop
'''
..........
.O........
.........#
...#......
.^....#...
..#.......
#.......#.
.....#....
'''
inp_testcase5 = '''
..........
..........
.........#
...#......
.^....#...
..#.......
#.......#.
.....#....
'''

# Verifies can't place object on initial guard position 
#   - Should be 1 placement
inp_testcase6 = '''
.##..
....#
.....
.^...
...#.
'''


# Verifies correct counting of object that contributes to more than 1 loop
#   - Should be 3 placements, the middle 'O' counting as 1 although it closes 2 loops
inp_testcase7 = '''
.#...O....
.....O...#
#........#
.^..#...O.
........#.
..........
..........
..........
..........
'''


# Verifies circular loop
#   - Should be 0 placements
inp_testcase8 = '''
.#..
#.#.
#O#.
.^..

'''


# Get initial direction and position of the guard
def get_guard_pos():
    for i in range(len(map)):
        for j in range(len(map[i])):
            if (map[i][j] == '^'):
                return UP, [i, j]
            elif (map[i][j] == '>'):
                return RIGHT, [i, j]
            elif (map[i][j] == 'v'):
                return DOWN, [i, j]
            elif (map[i][j] == '<'):
                return LEFT, [i, j]
    return -1


map = inp_testcase6.split()
UP = 1
RIGHT = 2
DOWN = 3
LEFT = 4


initial_dir, initial_guard_pos = get_guard_pos()
# print(map[0])

def put_char_at_index(string_inp : str, char : str, index : int):
    build = ""
    for i in range(len(string_inp)):
        if (i == index):
            build += char
        else:
            build += string_inp[i]

    return build


def guard_in_bounds(guard_pos):
    return (guard_pos[0] >= 0 and guard_pos[0] < len(map) and 
            guard_pos[1] >= 0 and guard_pos[1] < len(map[0]))


# def move(dir):
def get_next_pos(guard_pos, cur_dir):
    if not next_in_bounds(guard_pos, cur_dir):
        return None 

    copy_pos = guard_pos.copy()

    if (cur_dir == UP):
        copy_pos[0] -= 1
    elif (cur_dir == RIGHT):
        copy_pos[1] += 1
    elif (cur_dir == DOWN):
        copy_pos[0] += 1
    elif (cur_dir == LEFT):
        copy_pos[1] -= 1
    
    return copy_pos



loop_storage = set()

def is_loop(initial_pos, initial_dir):
    it = 0
    visited = set() # initialize 1 element 
    cur_dir = initial_dir
    cur_pos = initial_pos.copy()

    init_pos_info = cur_pos.copy()
    init_pos_info.extend([cur_dir])
    visited.add(tuple(init_pos_info))

    # change cur_dir to go 1 to right
    if(cur_dir == UP):
        cur_dir = RIGHT
    elif (cur_dir == RIGHT):
        cur_dir = DOWN
    elif (cur_dir == DOWN):
        cur_dir = LEFT
    elif (cur_dir == LEFT):
        cur_dir = UP

    while (guard_in_bounds(cur_pos)):
        
        # set the current element guard is on to visited
        # move according to the current direction

        # add pos, cur_dir to visited dict 

        # casting to tuple here, a bit weird
        # if pos, cur_dir is in the dict, we are in a loop
        # if (cur_pos == initial_pos):

        cur_pos_info = cur_pos.copy()
        cur_pos_info.extend([cur_dir])
        
        if (tuple(cur_pos_info) in visited):
            print(f"found loop starting from {initial_pos} {initial_dir}")

            if (get_next_pos(cur_pos, cur_dir) != None):
                loop_storage.add(tuple(get_next_pos(cur_pos, cur_dir)))
            return True

        visited.add(tuple(cur_pos_info))

        # print(visited)
        if (cur_dir == UP):
            # return if next is OOB
            if (cur_pos[0] - 1 < 0):
                # print("noloopfound")
                return False
            
            # stop and change cur_direction if next element is an obstacle
            if (map[cur_pos[0] - 1][cur_pos[1]] == '#'):
                cur_dir = RIGHT
                continue

            cur_pos[0] -= 1
        elif (cur_dir == RIGHT):

            # return if next is OOB
            if (cur_pos[1] + 1 >= len(map[0])):
                # print("noloopfound")
                return False

            if (map[cur_pos[0]][cur_pos[1] + 1] == '#'):
                cur_dir = DOWN
                continue

            cur_pos[1] += 1
        elif (cur_dir == DOWN):
            # return if next is OOB
            if (cur_pos[0] + 1 >= len(map)):
                # print("noloopfound")
                return False

            if (map[cur_pos[0] + 1][cur_pos[1]] == '#'):
                cur_dir = LEFT
                continue
            
            cur_pos[0] += 1
        elif (cur_dir == LEFT):
            # return if next is OOB
            if (cur_pos[1] - 1 < 0):
                # print("noloopfound")
                return False
            
            if (map[cur_pos[0]][cur_pos[1] - 1] == '#'):
                cur_dir = UP
                continue
            
            cur_pos[1] -= 1
        it += 1

        

    # print("noloopfoundexit")
    return False

def next_is_guard(guard_pos, cur_dir):
    if not next_in_bounds(guard_pos, cur_dir):
        return False 

    copy_pos = guard_pos.copy()

    if (cur_dir == UP):
        copy_pos[0] -= 1
    elif (cur_dir == RIGHT):
        copy_pos[1] += 1
    elif (cur_dir == DOWN):
        copy_pos[0] += 1
    elif (cur_dir == LEFT):
        copy_pos[1] -= 1

    print(f"\t\tnextIsGuard: {copy_pos == initial_guard_pos} ({copy_pos}) and ({initial_guard_pos}) at {guard_pos}, {cur_dir}")
    return (copy_pos == initial_guard_pos)
    


def next_in_bounds(guard_pos, cur_dir):
    copy_pos = guard_pos.copy()

    if (cur_dir == UP):
        copy_pos[0] -= 1
    elif (cur_dir == RIGHT):
        copy_pos[1] += 1
    elif (cur_dir == DOWN):
        copy_pos[0] += 1
    elif (cur_dir == LEFT):
        copy_pos[1] -= 1

    print(f"{copy_pos} and {guard_in_bounds(copy_pos)}")
    return guard_in_bounds(copy_pos)


def turning(guard_pos, cur_dir):
    if (not next_in_bounds(guard_pos, cur_dir)):
        return False

    if (cur_dir == UP):
        if (map[guard_pos[0] - 1][guard_pos[1]] == '#'):
            return True
    elif (cur_dir == RIGHT):
        if (map[guard_pos[0]][guard_pos[1] + 1] == '#'):
            return True
    elif (cur_dir == DOWN):
        if (map[guard_pos[0] + 1][guard_pos[1]] == '#'):
            return True
    elif (cur_dir == LEFT):
        if (map[guard_pos[0]][guard_pos[1] - 1] == '#'):
            return True

    return False

def traverse(init_guard_pos, dir = 1):
    cur_dir = dir
    distinct_count = 0
    loop_count = 0
    guard_pos = init_guard_pos.copy()
    while (guard_in_bounds(guard_pos)):
        print(f"curPosTrav: {guard_pos} {cur_dir}")
        # set the current element guard is on to visited
        # map[guard_pos[0]][guard_pos[1]].replace(".", "X")
        if (map[guard_pos[0]][guard_pos[1]] != "X"):
            distinct_count += 1
            map[guard_pos[0]] = put_char_at_index(map[guard_pos[0]], "X", guard_pos[1])
        
        print(f"turning: {turning(guard_pos, cur_dir)}")
        if ((not next_is_guard(guard_pos, cur_dir)) and is_loop(guard_pos, cur_dir) 
            and (not (turning(guard_pos, cur_dir))) and next_in_bounds(guard_pos, cur_dir)):
            print("\tinc loop!")
            loop_count += 1

        # move according to the current direction
        if (cur_dir == UP):
            # print("up")
            # return if next is OOB
            if (guard_pos[0] - 1 < 0):
                return distinct_count, loop_count
            
            # stop and change cur_direction if next element is an obstacle
            if (map[guard_pos[0] - 1][guard_pos[1]] == '#'):
                cur_dir = RIGHT
                continue

            guard_pos[0] -= 1
        elif (cur_dir == RIGHT):
            # print("right")

            # return if next is OOB
            if (guard_pos[1] + 1 >= len(map[0])):
                return distinct_count, loop_count

            if (map[guard_pos[0]][guard_pos[1] + 1] == '#'):
                cur_dir = DOWN
                continue

            guard_pos[1] += 1
        elif (cur_dir == DOWN):
            # print("down")
            # return if next is OOB
            if (guard_pos[0] + 1 >= len(map)):
                return distinct_count, loop_count

            if (map[guard_pos[0] + 1][guard_pos[1]] == '#'):
                cur_dir = LEFT
                continue
            
            guard_pos[0] += 1
        elif (cur_dir == LEFT):
            # print("left")
            # return if next is OOB
            if (guard_pos[1] - 1 < 0):
                return distinct_count, loop_count
            
            if (map[guard_pos[0]][guard_pos[1] - 1] == '#'):
                cur_dir = UP
                continue
            
            guard_pos[1] -= 1

    return distinct_count, loop_count


    


ans, loop_ans = traverse(initial_guard_pos, initial_dir)

for i in range(len(map)):
    print(map[i])

print(f"distinctCount: {ans}, loopCount: {loop_ans}")
print(f"loopStorage: {len(loop_storage)}")

# s = set()
# thing = tuple([1, 0, 0])
# print(s)
